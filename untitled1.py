# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jOlrqwi9Ekj8zGx4R6P5nMpk7vLgKaG-
"""

from google.colab import drive
drive.mount('/content/drive')

"""# usa.gov data from bit.ly

"""

path = "/content/drive/MyDrive/CONJUNTO DE DATOS/example.txt"
open(path).readline()

import json
path = '/content/drive/MyDrive/CONJUNTO DE DATOS/example.txt'
records = [json.loads(line) for line in open(path)]

records[0]

records[0]['tz']

print(records[0]['tz'])

"""# Counting Time Zones in Pure Python"""

time_zones = [rec['tz'] for rec in records if 'tz' in rec]
time_zones[:10]

import json

path = "/content/drive/MyDrive/CONJUNTO DE DATOS/example.txt"

time_zones = [rec['tz'] for rec in records if 'tz' in rec]

def get_counts(sequence):
  counts={}
  for x in sequence:
    if x in counts:
      counts [x]+=1
    else:
      counts [x]=1
  return counts


from collections import defaultdict
def get_counts2(sequence):
  counts=defaultdict(int)
  for x in sequence:
    if x in counts:
      counts [x]+=1
  return counts


def top_counts(count_dict, n=10):
  value_key_pairs=[(count,tz)for tz,count in count_dict.items()]
  value_key_pairs.sort()
  return value_key_pairs[-n:]


  top_counts

counts = get_counts(time_zones)
counts['America/New_York']

len(time_zones)

from collections import Counter

counts = Counter(time_zones)

def top_counts(count_dict, n=10):
  value_key_pairs = [(count, tz) for tz, count in count_dict.items()]
  value_key_pairs.sort()
  return value_key_pairs[-n:]

counts.most_common(10)

"""# Counting Time Zones with pandas"""

from pandas import DataFrame, Series
import pandas as pd
frame = DataFrame(records)
frame

frame['tz'][:10]

tz_counts = frame['tz'].value_counts()

tz_counts[:10]

tz_counts[:10].plot(kind='barh', rot=0)

frame['a'][1]

frame['a'][50]

frame['a'][51]

results = Series([x.split()[0] for x in frame.a.dropna()])

results[:5]

results.value_counts()[:8]

cframe = frame[frame.a.notnull()]

import numpy as np

operating_system = np.where(cframe['a'].str.contains('Windows'),
.....: 'Windows', 'Not Windows')

operating_system[:5]

by_tz_os = cframe.groupby(['tz', operating_system])
agg_counts = by_tz_os.size().unstack().fillna(0)
agg_counts[:10]

# Use to sort in ascending order
indexer = agg_counts.sum(1).argsort()
indexer[:10]

count_subset = agg_counts.take(indexer)[-10:]
count_subset

count_subset.plot(kind='barh', stacked=True)

normed_subset = count_subset.div(count_subset.sum(1), axis=0)
normed_subset.plot(kind='barh', stacked=True)